import nextcord
from nextcord.ext import commands #Import Library | –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from nextcord.ui import Button,View

client = commands.Bot()
token = "" #Your token | –¢–≤–æ–π —Ç–æ–∫–µ–Ω

#Code for Over | –ö–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –æ–≤–µ—Ä—É
class over(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("Calculator | –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")  #X Coordinate | –ö–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
        self.X_Coordinate = nextcord.ui.TextInput(
            label="Enter X coordinates | –• –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã",
            placeholder="Enter X coordinates | X –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã",
            min_length=2,
            max_length=100,
        )
        self.add_item(self.X_Coordinate)

        self.Z_Coordinate = nextcord.ui.TextInput( #Z Coordinate | –ö–æ—Ä–¥–∏–Ω–∞—Ç–∞ Z
            label="Enter Z coordinates | –ó –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã",
            placeholder="Enter Z coordinates | –ó –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã",
            min_length=2,
            max_length=100,
        )
        self.add_item(self.Z_Coordinate)

    async def callback(self, interaction: nextcord.Interaction): #Algorithm and text output | –ê–ª–≥–æ—Ä–∏—Ç–º, –∏ –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        a = float(self.Z_Coordinate.value)
        b = float(self.X_Coordinate.value)
        a_2 = a * 8
        b_2 = b * 8
        embed = nextcord.Embed(
            title="Over spawn coordinates | –ö–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ø–∞–≤–Ω–∞ –ø–æ Over",
            colour=nextcord.Colour.green()

        )
        embed.add_field(name='X Coordinates | X –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã', value=b_2, inline=True)
        embed.add_field(name='Z Coordinates | –ó –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã', value=a_2, inline=True)
        await interaction.send(embed=embed)


@client.slash_command( #output text through "/" | –í—ã–∑–æ–≤ —Å –ø–æ–º–æ—â—å—é "/"
    name="nether",
    description="Write Your coordinate | –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã",
)
async def send(interaction: nextcord.Interaction):
    modal = nether()
    await interaction.response.send_modal(modal)


#code from Nether | –ö–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –Ω–µ–∑–µ—Ä—É

class nether(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("calculator") #X Coordinate | –ö–æ—Ä–¥–∏–Ω–∞—Ç–∞ X

        self.X_Coordinate = nextcord.ui.TextInput(
            label="Enter X coordinates | X –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã",
            placeholder="Enter X coordinates | –• –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã",
            min_length=2,
            max_length=100,
        )
        self.add_item(self.X_Coordinate)

        self.Z_Coordinate = nextcord.ui.TextInput( #Z Coordinate | –ö–æ—Ä–¥–∏–Ω–∞—Ç–∞ Z
            label="Enter Z coordinates | –ó –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã",
            placeholder="Enter Z coordinates | –ó –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã",
            min_length=2,
            max_length=100,
        )
        self.add_item(self.Z_Coordinate)

    async def callback(self, interaction: nextcord.Interaction): #Algorithm and text output | –ê–ª–≥–æ—Ä–∏—Ç–º, –∏ –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        a = float(self.Z_Coordinate.value)
        b = float(self.X_Coordinate.value)
        a_2 = a / 8
        b_2 = b / 8
        embed = nextcord.Embed(
            title="Nether spawn coordinates | –ö–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ø–∞–≤–Ω–∞ –ø–æ Nether",
            colour=nextcord.Colour.red()

        )
        embed.add_field(name='X Coordinates | –• –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã', value=b_2, inline=True)
        embed.add_field(name='Z Coordinates | –ó –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã', value=a_2, inline=True)
        await interaction.send(embed=embed)

@client.slash_command(#output text through "/" | –í—ã–∑–æ–≤ —Å –ø–æ–º–æ—â—å—é "/"
    name="over",
    description="Write Your coordinate | –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã",
)
async def send(interaction: nextcord.Interaction):
    modal = over()
    await interaction.response.send_modal(modal)

@client.slash_command( #output text through "/" | –í—ã–∑–æ–≤ —Å –ø–æ–º–æ—â—å—é "/"
    name="help",
    description="Help menu | –•–µ–ª–ø –º–µ–Ω—é",
)
async def test(ctx): #button for message | –ö–Ω–æ–ø–∫–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ
    button = Button(label="Continue ", style=nextcord.ButtonStyle.red)
    button1 = Button(label="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ", style=nextcord.ButtonStyle.blurple)

    async def English_HelpMenu(interaction):
        button = Button(label='Test "/over" ', style=nextcord.ButtonStyle.green)
        button1 = Button(label='Test "/nether" ', style=nextcord.ButtonStyle.red)

        async def Over_Menu2(interaction):
            await interaction.response.send_modal(modal=over())

        button.callback = Over_Menu2

        async def Nether_Menu2(interaction):
            await interaction.response.send_modal(modal=nether())

        button1.callback = Nether_Menu2

        view = View()
        view.add_item(button)
        view.add_item(button1)
        embed = nextcord.Embed(title="üõ† And here is all the information you need",color=nextcord.Colour.yellow(), type="rich")
        embed.add_field(name="1.Nether", value='How to use "/nether" ? I will give an example when you are in Over_World and you need to find out where and at what coordinates your portal will spawn in Nether_World.', inline=True)
        embed.add_field(name="2.Over", value='How to use "/over" ? I will give an example when you are in Nether_World and you need to find out where and at what coordinates your portal will be spawned in Over_World.', inline=True)
        embed.add_field(name="3.WARNING‚ö†", value='Be aware that the coordinates may be inaccurate. And they will be wrong by 1-10 blocks.', inline=True)
        embed.add_field(name="4.Additionally!",value='Below this message there are buttons, by clicking on them you can test the bot!',inline=True)
        await ctx.send(embed=embed, view=view)

    button.callback = English_HelpMenu

    async def Russian_HelpMenu(interaction):
        button = Button(label='–¢–µ—Å—Ç "/over" ', style=nextcord.ButtonStyle.green)
        button1 = Button(label='–¢–µ—Å—Ç "/nether" ', style=nextcord.ButtonStyle.red)

        async def Over_Menu2(interaction):
            await interaction.response.send_modal(modal=over())

        button.callback = Over_Menu2

        async def Nether_Menu2(interaction):
            await interaction.response.send_modal(modal=nether())

        button1.callback = Nether_Menu2

        view = View()
        view.add_item(button)
        view.add_item(button1)
        embed = nextcord.Embed(title="üõ† –ê –≤–æ—Ç –∏ –≤—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", color=nextcord.Colour.yellow(),type="rich")
        embed.add_field(name="1.Nether",value='–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "/Nether" ? –Ø –ø—Ä–∏–≤–µ–¥—É –ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ Over_World –∏ –≤–∞–º –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –≥–¥–µ –∏ –ø–æ –∫–∞–∫–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å–ø–∞–≤–Ω–∏—Ç—Å—è –≤–∞—à –ø–æ—Ä—Ç–∞–ª –≤ Nether_World.',inline=True)
        embed.add_field(name="2.Over",value='–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ¬´/Over¬ª? –Ø –ø—Ä–∏–≤–µ–¥—É –ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ Nether_World –∏ –≤–∞–º –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –≥–¥–µ –∏ –ø–æ –∫–∞–∫–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –±—É–¥–µ—Ç —Å–ø–∞–≤–Ω–∏—Ç—å—Å—è –≤–∞—à –ø–æ—Ä—Ç–∞–ª –≤ OverWorld.',inline=True)
        embed.add_field(name="3.–í–∞–∂–Ω–æ‚ö†",value='–ò–º–µ–π—Ç–µ –≤ –≤–∏–¥—É, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º–∏. –ò –æ–Ω–∏ –±—É–¥—É—Ç –æ—à–∏–±–∞—Ç—å—Å—è –Ω–∞ 1-10 –±–ª–æ–∫–æ–≤.',inline=True)
        embed.add_field(name="4.–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ!",value='–ù–∏–∂–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–∏—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞!',inline=True)

        await ctx.send(embed=embed, view=view)

    button1.callback = Russian_HelpMenu

    view = View()
    view.add_item(button)
    view.add_item(button1)
    embed = nextcord.Embed(title="üá∫üá∏",description='Hi, this is a help menu. Choose the language that is more convenient for you.',color=nextcord.Colour.yellow(), type="rich")
    embed.add_field(name="üá∑üá∫", value='–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ö–µ–ª–ø-–º–µ–Ω—é. –í—ã–±–µ—Ä–∏ —Ç–æ—Ç —è–∑—ã–∫ –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ.', inline=True)
    await ctx.send(embed=embed, view=view)

client.run(token)